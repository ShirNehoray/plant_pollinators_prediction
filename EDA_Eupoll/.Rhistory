labs(title = "Top 20 Most Similar Network Pairs Across All Bioregions",
x = "Network Pair", y = "Jaccard Similarity") +
theme_minimal() +
scale_fill_brewer(palette = "Set2") +
theme(axis.text.y = element_text(size = 8))
}
# Assuming your data has Network_id, Latitude, Longitude, and other relevant columns
# First, prepare the coordinates data
network_coords <- data %>%
group_by(Network_id) %>%  # Group by network to get mean coordinates if multiple points per network
summarise(
Latitude = mean(Latitude, na.rm = TRUE),
Longitude = mean(Longitude, na.rm = TRUE),
Country = first(Country),  # Take first country if multiple
Bioregion = first(Bioregion),  # Take first bioregion if multiple
.groups = "drop"
) %>%
filter(!is.na(Latitude) & !is.na(Longitude))  # Remove rows with missing coordinates
# Load required libraries
library(rnaturalearth)
library(rnaturalearthdata)
library(ggplot2)
library(sf)
# Get European map
europe_map <- ne_countries(scale = "medium", continent = "Europe", returnclass = "sf")
# Create the map with network locations
p <- ggplot() +
# Plot the European map
geom_sf(data = europe_map, fill = "lightgray", color = "white", size = 0.3) +
# Plot network points
geom_point(data = network_coords,
aes(x = Longitude, y = Latitude, color = Bioregion),  # Color by bioregion
size = 2.5, alpha = 0.8) +
# Color scale for bioregions (matching your previous figure)
scale_color_manual(values = c(
"Alpine" = "#7F7FFF",
"Atlantic" = "#4D7EFF",
"Boreal" = "#4DAF4E",
"Continental" = "#A6D854",
"Mediterranean" = "#E6AB02",
"Pannonian" = "#E31A1C",
"Steppic" = "#FFFF99"
), name = "Bioregion") +
# Set coordinate limits for Europe
coord_sf(xlim = c(-10, 35), ylim = c(35, 72)) +
# Customize the theme
theme_minimal() +
theme(
legend.position = "right",
legend.title = element_text(size = 11, face = "bold"),
legend.text = element_text(size = 9),
plot.title = element_text(size = 14, face = "bold", hjust = 0.5),
axis.text = element_text(size = 10),
axis.title = element_text(size = 11, face = "bold")
) +
# Labels
labs(
title = "Geographical Distribution of Plant-Pollinator Networks",
x = "Longitude",
y = "Latitude",
subtitle = paste("Total networks:", nrow(network_coords))
)
# Display the plot
print(p)
# Save the plot
ggsave("europe_network_map.png", plot = p, width = 12, height = 10, dpi = 300, bg = "white")
# Summary statistics
cat("Summary of network coordinates:\n")
cat("Total networks with coordinates:", nrow(network_coords), "\n")
cat("Coordinate range - Latitude:", round(range(network_coords$Latitude, na.rm = TRUE), 2), "\n")
cat("Coordinate range - Longitude:", round(range(network_coords$Longitude, na.rm = TRUE), 2), "\n")
cat("Countries represented:", length(unique(network_coords$Country)), "\n")
cat("Bioregions represented:", length(unique(network_coords$Bioregion)), "\n")
# Optional: Color by country instead of bioregion
p_country <- ggplot() +
geom_sf(data = europe_map, fill = "lightgray", color = "white", size = 0.3) +
geom_point(data = network_coords,
aes(x = Longitude, y = Latitude, color = Country),
size = 2.5, alpha = 0.8) +
scale_color_viridis_d(name = "Country") +  # Automatic colors for countries
coord_sf(xlim = c(-10, 35), ylim = c(35, 72)) +
theme_minimal() +
theme(
legend.position = "right",
legend.title = element_text(size = 11, face = "bold"),
legend.text = element_text(size = 8)
) +
labs(
title = "Geographical Distribution of Networks by Country",
x = "Longitude",
y = "Latitude"
)
print(p_country)
# Optional: Size points by network characteristics (e.g., species richness)
# First, join with network summary if you have it
if (exists("network_summary")) {
network_coords_rich <- network_coords %>%
left_join(network_summary %>% select(Network_id, n_plants, n_pollinators), by = "Network_id") %>%
mutate(Total_Species = n_plants + n_pollinators)
p_rich <- ggplot() +
geom_sf(data = europe_map, fill = "lightgray", color = "white", size = 0.3) +
geom_point(data = network_coords_rich,
aes(x = Longitude, y = Latitude,
color = Bioregion, size = Total_Species),
alpha = 0.7) +
scale_color_manual(values = c(
"Alpine" = "#7F7FFF", "Atlantic" = "#4D7EFF", "Boreal" = "#4DAF4E",
"Continental" = "#A6D854", "Mediterranean" = "#E6AB02",
"Pannonian" = "#E31A1C", "Steppic" = "#FFFF99"
), name = "Bioregion") +
scale_size_continuous(name = "Total Species", range = c(1.5, 5)) +
coord_sf(xlim = c(-10, 35), ylim = c(35, 72)) +
theme_minimal() +
theme(legend.position = "right", legend.box = "vertical") +
labs(
title = "Network Distribution (Size = Total Species Richness)",
x = "Longitude",
y = "Latitude"
)
print(p_rich)
}
# First, prepare the top similarity data with coordinates
top_similarities_coords <- top_similarities %>%
# Split the network pairs to get individual network IDs
separate_rows(Var1, Var2, sep = ",") %>%  # If pairs are comma-separated
# Alternative if pairs are already separate columns:
# select(-Var1, -Var2) %>%  # Remove pair column if you have separate Network1, Network2
mutate(Network_id = c(Var1, Var2)) %>%  # Create a long format with both networks
select(-Var1, -Var2) %>%
distinct() %>%  # Remove duplicates
left_join(
# Get coordinates for each network
interactions %>%
group_by(Network_id) %>%
summarise(
Latitude = mean(Latitude, na.rm = TRUE),
Longitude = mean(Longitude, na.rm = TRUE),
Country = first(Country),  # Get country info
.groups = "drop"
),
by = "Network_id"
) %>%
# Add similarity info back (average similarity for each network)
left_join(
top_similarities %>%
group_by(Var1) %>%
summarise(avg_similarity = mean(Freq, na.rm = TRUE), .groups = "drop") %>%
rename(Network_id = Var1),
by = "Network_id"
) %>%
# Fill missing avg_similarity with 0 or NA
mutate(avg_similarity = ifelse(is.na(avg_similarity), 0, avg_similarity))
# After building the similarity matrix, filter for highest similarity pairs (excluding diagonal)
for (bio in bioregions) {
cat("Processing Bioregion:", bio, "\n")
sub_data <- species_per_network %>% filter(Bioregion == bio)
nets <- sub_data$Network_id
# Build similarity matrix
mat <- matrix(NA, nrow = length(nets), ncol = length(nets),
dimnames = list(nets, nets))
for (i in seq_along(nets)) {
for (j in seq_along(nets)) {
mat[i,j] <- jaccard_similarity(sub_data$Pollinators[[i]], sub_data$Pollinators[[j]])
}
}
# Convert to dataframe and filter out diagonal (i != j)
mat_df <- as.data.frame(as.table(mat)) %>%
filter(Var1 != Var2) %>%  # Exclude diagonal (self-comparisons)
filter(!is.na(Freq)) %>%  # Remove any NA values
# Find top N most similar pairs (e.g., top 10)
arrange(desc(Freq)) %>%
slice_head(n = 10)  # Adjust number as needed
# Print the most similar pairs
cat("Top similar network pairs in", bio, ":\n")
print(mat_df)
# Optional: Create a simplified visualization of just the top pairs
# (You could make a network graph or simple table plot)
if (nrow(mat_df) > 0) {
# Simple bar plot of top similarities
top_sim_plot <- ggplot(mat_df, aes(x = reorder(paste(Var1, "-", Var2), Freq), y = Freq)) +
geom_col(fill = "steelblue", alpha = 0.7) +
coord_flip() +
labs(title = paste("Top 10 Most Similar Network Pairs -", bio),
x = "Network Pair", y = "Jaccard Similarity",
subtitle = paste("Showing networks with highest pollinator composition similarity")) +
theme_minimal() +
theme(axis.text.y = element_text(size = 8))
print(top_sim_plot)
}
# Store results for later use (optional)
if (!exists("top_similarities")) {
top_similarities <- data.frame()
}
mat_df$Bioregion <- bio
top_similarities <- bind_rows(top_similarities, mat_df)
}
# After the loop, you can summarize all top similarities across bioregions
if (exists("top_similarities")) {
# Overall top similar pairs across all bioregions
overall_top <- top_similarities %>%
arrange(desc(Freq)) %>%
head(20)
print("Overall Top 20 Most Similar Network Pairs:")
print(overall_top)
# Save to CSV
write_csv(top_similarities, "top_similar_network_pairs.csv")
# Plot overall top similarities
ggplot(overall_top, aes(x = reorder(paste(Var1, "-", Var2), Freq), y = Freq, fill = Bioregion)) +
geom_col(alpha = 0.7) +
coord_flip() +
labs(title = "Top 20 Most Similar Network Pairs Across All Bioregions",
x = "Network Pair", y = "Jaccard Similarity") +
theme_minimal() +
scale_fill_brewer(palette = "Set2") +
theme(axis.text.y = element_text(size = 8))
}
# First, prepare the top similarity data with coordinates
top_similarities_coords <- top_similarities %>%
# Split the network pairs to get individual network IDs
separate_rows(Var1, Var2, sep = ",") %>%  # If pairs are comma-separated
# Alternative if pairs are already separate columns:
# select(-Var1, -Var2) %>%  # Remove pair column if you have separate Network1, Network2
mutate(Network_id = c(Var1, Var2)) %>%  # Create a long format with both networks
select(-Var1, -Var2) %>%
distinct() %>%  # Remove duplicates
left_join(
# Get coordinates for each network
interactions %>%
group_by(Network_id) %>%
summarise(
Latitude = mean(Latitude, na.rm = TRUE),
Longitude = mean(Longitude, na.rm = TRUE),
Country = first(Country),  # Get country info
.groups = "drop"
),
by = "Network_id"
) %>%
# Add similarity info back (average similarity for each network)
left_join(
top_similarities %>%
group_by(Var1) %>%
summarise(avg_similarity = mean(Freq, na.rm = TRUE), .groups = "drop") %>%
rename(Network_id = Var1),
by = "Network_id"
) %>%
# Fill missing avg_similarity with 0 or NA
mutate(avg_similarity = ifelse(is.na(avg_similarity), 0, avg_similarity))
# First, prepare the top similarity data with coordinates - CORRECTED VERSION
top_similarities_coords <- top_similarities %>%
# Create long format with both networks from each pair
pivot_longer(cols = c(Var1, Var2), names_to = "Network_Position", values_to = "Network_id") %>%
# Get unique networks and join with coordinates
distinct(Network_id, Bioregion) %>%
left_join(
# Get coordinates for each network
interactions %>%
group_by(Network_id) %>%
summarise(
Latitude = mean(Latitude, na.rm = TRUE),
Longitude = mean(Longitude, na.rm = TRUE),
Country = first(Country),  # Get country info
.groups = "drop"
),
by = "Network_id"
) %>%
# Add similarity info back (average similarity for each network)
left_join(
top_similarities %>%
select(Var1, Freq) %>%
rename(Network_id = Var1) %>%
group_by(Network_id) %>%
summarise(avg_similarity = mean(Freq, na.rm = TRUE), .groups = "drop"),
by = "Network_id"
) %>%
left_join(
top_similarities %>%
select(Var2, Freq) %>%
rename(Network_id = Var2) %>%
group_by(Network_id) %>%
summarise(avg_similarity2 = mean(Freq, na.rm = TRUE), .groups = "drop"),
by = "Network_id"
) %>%
# Combine similarity values
mutate(avg_similarity = coalesce(avg_similarity, avg_similarity2, 0)) %>%
select(-avg_similarity2) %>%
# Remove rows with missing coordinates
filter(!is.na(Latitude), !is.na(Longitude))
# First, prepare the top similarity data with coordinates - CORRECTED VERSION
top_similarities_coords <- top_similarities %>%
# Create long format with both networks from each pair
pivot_longer(cols = c(Var1, Var2), names_to = "Network_Position", values_to = "Network_id") %>%
# Get unique networks and join with coordinates
distinct(Network_id, Bioregion) %>%
left_join(
# Get coordinates for each network
data %>%
group_by(Network_id) %>%
summarise(
Latitude = mean(Latitude, na.rm = TRUE),
Longitude = mean(Longitude, na.rm = TRUE),
Country = first(Country),  # Get country info
.groups = "drop"
),
by = "Network_id"
) %>%
# Add similarity info back (average similarity for each network)
left_join(
top_similarities %>%
select(Var1, Freq) %>%
rename(Network_id = Var1) %>%
group_by(Network_id) %>%
summarise(avg_similarity = mean(Freq, na.rm = TRUE), .groups = "drop"),
by = "Network_id"
) %>%
left_join(
top_similarities %>%
select(Var2, Freq) %>%
rename(Network_id = Var2) %>%
group_by(Network_id) %>%
summarise(avg_similarity2 = mean(Freq, na.rm = TRUE), .groups = "drop"),
by = "Network_id"
) %>%
# Combine similarity values
mutate(avg_similarity = coalesce(avg_similarity, avg_similarity2, 0)) %>%
select(-avg_similarity2) %>%
# Remove rows with missing coordinates
filter(!is.na(Latitude), !is.na(Longitude))
# Get European map
europe_map <- ne_countries(scale = "medium", continent = "Europe", returnclass = "sf")
# Create the map showing networks with highest similarity
p_sim_map <- ggplot() +
# Base map
geom_sf(data = europe_map, fill = "lightgray", color = "white", size = 0.3) +
# Points for all networks with high similarity, sized by similarity
geom_point(data = top_similarities_coords,
aes(x = Longitude, y = Latitude,
size = avg_similarity,
color = Bioregion),
alpha = 0.8) +
# Use bioregion colors matching your previous figure
scale_color_manual(values = c(
"Alpine" = "#7F7FFF",
"Atlantic" = "#4D7EFF",
"Boreal" = "#4DAF4E",
"Continental" = "#A6D854",
"Mediterranean" = "#E6AB02",
"Pannonian" = "#E31A1C",
"Steppic" = "#FFFF99"
), name = "Bioregion") +
# Size scale for similarity (larger = higher similarity)
scale_size_continuous(name = "Avg. Similarity",
range = c(2, 6),
breaks = c(0.2, 0.4, 0.6, 0.8),
labels = c("0.2", "0.4", "0.6", "≥0.8")) +
# European coordinate limits
coord_sf(xlim = c(-10, 35), ylim = c(35, 70)) +
theme_void() +
theme(
legend.position = "right",
legend.title = element_text(size = 11, face = "bold"),
legend.text = element_text(size = 9),
legend.box = "vertical",
legend.spacing = unit(0.2, "cm"),
plot.title = element_text(size = 14, face = "bold", hjust = 0.5),
plot.subtitle = element_text(size = 11, hjust = 0.5)
) +
labs(
title = "Geographical Distribution of Most Similar Network Pairs",
subtitle = paste("Showing", nrow(top_similarities_coords),
"networks involved in top similarity pairs")
)
print(p_sim_map)
# Alternative: Show only the top N most similar pairs (e.g., top 5 pairs = 10 networks)
top_n_pairs <- top_similarities %>%
slice_head(n = 5) %>%  # Top 5 pairs
# Create long format for both networks in each pair
pivot_longer(cols = c(Var1, Var2), names_to = "Network_Position", values_to = "Network_id") %>%
distinct(Network_id) %>%
left_join(
interactions %>%
group_by(Network_id) %>%
summarise(
Latitude = mean(Latitude, na.rm = TRUE),
Longitude = mean(Longitude, na.rm = TRUE),
Country = first(Country),
.groups = "drop"
),
by = "Network_id"
) %>%
filter(!is.na(Latitude), !is.na(Longitude))
# Alternative: Show only the top N most similar pairs (e.g., top 5 pairs = 10 networks)
top_n_pairs <- top_similarities %>%
slice_head(n = 5) %>%  # Top 5 pairs
# Create long format for both networks in each pair
pivot_longer(cols = c(Var1, Var2), names_to = "Network_Position", values_to = "Network_id") %>%
distinct(Network_id) %>%
left_join(
data %>%
group_by(Network_id) %>%
summarise(
Latitude = mean(Latitude, na.rm = TRUE),
Longitude = mean(Longitude, na.rm = TRUE),
Country = first(Country),
.groups = "drop"
),
by = "Network_id"
) %>%
filter(!is.na(Latitude), !is.na(Longitude))
p_top_map <- ggplot() +
geom_sf(data = europe_map, fill = "lightgray", color = "white", size = 0.3) +
geom_point(data = top_n_pairs,
aes(x = Longitude, y = Latitude,
fill = Country, color = Country),
size = 4, alpha = 0.8, shape = 21, stroke = 1) +
scale_fill_brewer(palette = "Set3", name = "Country") +
scale_color_brewer(palette = "Set3", name = "Country") +
coord_sf(xlim = c(-10, 35), ylim = c(35, 70)) +
theme_void() +
theme(
legend.position = "right",
legend.title = element_text(size = 11),
legend.text = element_text(size = 9),
plot.title = element_text(size = 14, face = "bold", hjust = 0.5)
) +
labs(
title = "Top 5 Most Similar Network Pairs",
subtitle = paste("Showing", nrow(top_n_pairs), "networks from top 5 pairs")
) +
guides(fill = guide_legend(override.aes = list(size = 4)),
color = "none")
print(p_top_map)
# Create a table showing the top pairs with their locations
slice_head(n = 10) %>%
# Get coordinates for Network 1
left_join(
select(Network_id, Country, Latitude, Longitude) %>%
summarise(Country = first(Country),
Longitude = mean(Longitude, na.rm = TRUE),
by = c("Var1" = "Network_id"),
) %>%
# Get coordinates for Network 2
left_join(
select(Network_id, Country, Latitude, Longitude) %>%
summarise(Country = first(Country),
Longitude = mean(Longitude, na.rm = TRUE),
by = c("Var2" = "Network_id"),
) %>%
Country_Net1 = Country
# After building the similarity matrix, filter for highest similarity pairs (excluding diagonal)
for (bio in bioregions) {
cat("Processing Bioregion:", bio, "\n")
sub_data <- species_per_network %>% filter(Bioregion == bio)
nets <- sub_data$Network_id
# Build similarity matrix
mat <- matrix(NA, nrow = length(nets), ncol = length(nets),
dimnames = list(nets, nets))
for (i in seq_along(nets)) {
for (j in seq_along(nets)) {
mat[i,j] <- jaccard_similarity(sub_data$Pollinators[[i]], sub_data$Pollinators[[j]])
}
}
# Convert to dataframe and filter out diagonal (i != j)
mat_df <- as.data.frame(as.table(mat)) %>%
filter(Var1 != Var2) %>%  # Exclude diagonal (self-comparisons)
filter(!is.na(Freq)) %>%  # Remove any NA values
# Find top N most similar pairs (e.g., top 10)
arrange(desc(Freq)) %>%
slice_head(n = 10)  # Adjust number as needed
# Print the most similar pairs
cat("Top similar network pairs in", bio, ":\n")
print(mat_df)
# Optional: Create a simplified visualization of just the top pairs
# (You could make a network graph or simple table plot)
if (nrow(mat_df) > 0) {
# Simple bar plot of top similarities
top_sim_plot <- ggplot(mat_df, aes(x = reorder(paste(Var1, "-", Var2), Freq), y = Freq)) +
geom_col(fill = "steelblue", alpha = 0.7) +
coord_flip() +
labs(title = paste("Top 10 Most Similar Network Pairs -", bio),
x = "Network Pair", y = "Jaccard Similarity",
subtitle = paste("Showing networks with highest pollinator composition similarity")) +
theme_minimal() +
theme(axis.text.y = element_text(size = 8))
print(top_sim_plot)
}
# Store results for later use (optional)
if (!exists("top_similarities")) {
top_similarities <- data.frame()
}
mat_df$Bioregion <- bio
top_similarities <- bind_rows(top_similarities, mat_df)
}
# After the loop, you can summarize all top similarities across bioregions
if (exists("top_similarities")) {
# Overall top similar pairs across all bioregions
overall_top <- top_similarities %>%
arrange(desc(Freq)) %>%
head(20)
print("Overall Top 20 Most Similar Network Pairs:")
print(overall_top)
# Save to CSV
write_csv(top_similarities, "top_similar_network_pairs.csv")
# Plot overall top similarities
ggplot(overall_top, aes(x = reorder(paste(Var1, "-", Var2), Freq), y = Freq, fill = Bioregion)) +
geom_col(alpha = 0.7) +
coord_flip() +
labs(title = "Top 20 Most Similar Network Pairs Across All Bioregions",
x = "Network Pair", y = "Jaccard Similarity") +
theme_minimal() +
scale_fill_brewer(palette = "Set2") +
theme(axis.text.y = element_text(size = 8))
}
